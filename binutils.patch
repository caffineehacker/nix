diff --git a/pkgs/build-support/bintools-wrapper/default.nix b/pkgs/build-support/bintools-wrapper/default.nix
index 5ca5bc3f5eb3..80c10311f7e9 100644
--- a/pkgs/build-support/bintools-wrapper/default.nix
+++ b/pkgs/build-support/bintools-wrapper/default.nix
@@ -8,6 +8,7 @@
 { name ? ""
 , lib
 , stdenvNoCC
+, stdenv ? stdenvNoCC
 , runtimeShell
 , bintools ? null, libc ? null, coreutils ? null, gnugrep ? null
 , netbsd ? null, netbsdCross ? null
@@ -84,7 +85,7 @@ let
     replaceStrings
     ;
 
-  inherit (stdenvNoCC) hostPlatform targetPlatform;
+  inherit (stdenv) hostPlatform targetPlatform;
 
   # Prefix for binaries. Customarily ends with a dash separator.
   #
@@ -132,6 +133,15 @@ let
     else if hasSuffix "pc-gnu" targetPlatform.config then "ld.so.1"
     else "";
 
+  # We can install the link only if our compiler's host and target
+  # match GNU binutils' host and target.
+  gcc_lto_plugin_is_compatible =
+       (bintools.isGNU or false)
+    && stdenv.cc != null
+    && stdenv.cc.stdenv.hostPlatform == stdenv.hostPlatform
+    && stdenv.cc.stdenv.targetPlatform == stdenv.targetPlatform;
+  gcc_lto_plugin_path = "${stdenv.cc.cc}/libexec/gcc/${stdenv.targetPlatform.config}/${stdenv.cc.cc.version or "UNKNOWN"}/liblto_plugin.so";
+
 in
 
 stdenvNoCC.mkDerivation {
@@ -172,6 +182,8 @@ stdenvNoCC.mkDerivation {
 
   installPhase =
     ''
+      runHook preInstall
+
       mkdir -p $out/bin $out/nix-support
 
       wrap() {
@@ -215,7 +227,7 @@ stdenvNoCC.mkDerivation {
 
     # Create symlinks for rest of the binaries.
     + ''
-      for binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \
+      for binary in objdump objcopy size strings as nm gprof dwp c++filt addr2line \
           ranlib readelf elfedit dlltool dllwrap windmc windres; do
         if [ -e $ldPath/${targetPrefix}''${binary} ]; then
           ln -s $ldPath/${targetPrefix}''${binary} $out/bin/${targetPrefix}''${binary}
@@ -237,6 +249,8 @@ stdenvNoCC.mkDerivation {
         basename=$(basename "$variant")
         wrap $basename ${./ld-wrapper.sh} $variant
       done
+
+      runHook postInstall
     '';
 
   strictDeps = true;
@@ -247,6 +261,25 @@ stdenvNoCC.mkDerivation {
     ./setup-hook.sh
   ];
 
+  # Install linker plugin to make 'ar', 'ld' and friends auto-load
+  # linker plugin to handle LTO bytecode without explicit --plugin
+  # parameter.
+  #
+  # We can install the link only if our compiler's host and target
+  # match GNU binutils' host and target.
+  gnu_binutils_inject_plugin = lib.optionalString gcc_lto_plugin_is_compatible ''
+    if [ -d ${placeholder "out"}/lib/bfd-plugins ]; then
+      export BFD_PLUGINS_DIR="${placeholder "out"}/lib/bfd-plugins"
+    fi
+  '';
+
+  postInstall = lib.optionalString gcc_lto_plugin_is_compatible ''
+      if [ -e ${gcc_lto_plugin_path} ]; then
+        mkdir -p $out/lib/bfd-plugins
+        ln -s ${gcc_lto_plugin_path} $out/lib/bfd-plugins/
+      fi
+  '';
+
   postFixup =
     ##
     ## General libc support
@@ -257,6 +290,7 @@ stdenvNoCC.mkDerivation {
 
       echo "${libc_lib}" > $out/nix-support/orig-libc
       echo "${libc_dev}" > $out/nix-support/orig-libc-dev
+
     ''
 
     ##
@@ -354,6 +388,9 @@ stdenvNoCC.mkDerivation {
     + optionalString (bintools.isGNU or false) ''
       wrap ${targetPrefix}strip ${./gnu-binutils-strip-wrapper.sh} \
         "${bintools_bin}/bin/${targetPrefix}strip"
+      # TODO: also wrap: size, rescoff, nm, dlltool, coffdump, addr2line, ranlib, maybe others?
+      wrap ${targetPrefix}ar ${./gnu-binutils-ar-wrapper.sh} \
+        "${bintools_bin}/bin/${targetPrefix}ar"
     ''
 
     ###
diff --git a/pkgs/build-support/bintools-wrapper/gnu-binutils-ar-wrapper.sh b/pkgs/build-support/bintools-wrapper/gnu-binutils-ar-wrapper.sh
new file mode 100644
index 000000000000..f631390f5897
--- /dev/null
+++ b/pkgs/build-support/bintools-wrapper/gnu-binutils-ar-wrapper.sh
@@ -0,0 +1,5 @@
+#! @shell@
+# shellcheck shell=bash
+
+@gnu_binutils_inject_plugin@
+exec @prog@ "$@"
diff --git a/pkgs/build-support/bintools-wrapper/gnu-binutils-strip-wrapper.sh b/pkgs/build-support/bintools-wrapper/gnu-binutils-strip-wrapper.sh
index 5b5136e3d14c..6675579c9e65 100644
--- a/pkgs/build-support/bintools-wrapper/gnu-binutils-strip-wrapper.sh
+++ b/pkgs/build-support/bintools-wrapper/gnu-binutils-strip-wrapper.sh
@@ -1,4 +1,5 @@
 #! @shell@
 # shellcheck shell=bash
 
+@gnu_binutils_inject_plugin@
 exec @prog@ --enable-deterministic-archives "$@"
diff --git a/pkgs/build-support/bintools-wrapper/ld-wrapper.sh b/pkgs/build-support/bintools-wrapper/ld-wrapper.sh
index dcbe8a4c2494..6e9afbf7c860 100644
--- a/pkgs/build-support/bintools-wrapper/ld-wrapper.sh
+++ b/pkgs/build-support/bintools-wrapper/ld-wrapper.sh
@@ -254,6 +254,7 @@ if (( "${NIX_DEBUG:-0}" >= 1 )); then
 fi
 
 PATH="$path_backup"
+@gnu_binutils_inject_plugin@
 # Old bash workaround, see above.
 
 if (( "${NIX_LD_USE_RESPONSE_FILE:-@use_response_file_by_default@}" >= 1 )); then
diff --git a/pkgs/development/tools/misc/binutils/BFD_PLUGINS_DIR.patch b/pkgs/development/tools/misc/binutils/BFD_PLUGINS_DIR.patch
new file mode 100644
index 000000000000..8854cb67b1da
--- /dev/null
+++ b/pkgs/development/tools/misc/binutils/BFD_PLUGINS_DIR.patch
@@ -0,0 +1,23 @@
+--- a/bfd/plugin.c
++++ b/bfd/plugin.c
+@@ -490,9 +490,17 @@ build_plugin_list (bfd *abfd)
+   /* The intent was to search ${libdir}/bfd-plugins for plugins, but
+      unfortunately the original implementation wasn't precisely that
+      when configuring binutils using --libdir.  Search in the proper
+-     path first, then the old one for backwards compatibility.  */
+-  static const char *path[]
+-    = { LIBDIR "/bfd-plugins", };
++     path first, then the old one for backwards compatibility.
++
++     On top of that user is allowed to extend default search path with
++     BFD_PLUGINS_DIR environment variable. It's useful for cases when
++     modifying system directories is not feasible.
++   */
++  const char *path[] =
++    {
++      getenv ("BFD_PLUGINS_DIR"),
++      LIBDIR "/bfd-plugins",
++    };
+   struct stat last_st;
+   unsigned int i;
+ 
diff --git a/pkgs/development/tools/misc/binutils/default.nix b/pkgs/development/tools/misc/binutils/default.nix
index c707d0daec89..cfa4ad4d8e7f 100644
--- a/pkgs/development/tools/misc/binutils/default.nix
+++ b/pkgs/development/tools/misc/binutils/default.nix
@@ -95,6 +95,9 @@ stdenv.mkDerivation (finalAttrs: {
     # not need to know binutils' BINDIR at all. It's an absolute path
     # where libraries are stored.
     ./plugins-no-BINDIR.patch
+
+    # Add an extra path to look up gcc LTO plugin. Used by binutils wrapper.
+    ./BFD_PLUGINS_DIR.patch
   ]
   ++ lib.optional targetPlatform.isiOS ./support-ios.patch
   # Adds AVR-specific options to "size" for compatibility with Atmel's downstream distribution
